import { ref as c, computed as i, watchEffect as B, onBeforeMount as h, onMounted as I, openBlock as u, createElementBlock as p, normalizeClass as s, normalizeStyle as d, unref as t, renderSlot as b, normalizeProps as k, guardReactiveProps as O, toDisplayString as w, createCommentVNode as A, withDirectives as E, createElementVNode as f, vShow as $ } from "vue";
const C = "fade-left", D = "fade-right", P = "fade-up", R = "fade-down", y = {
  [C]: { transform: "translate(-100%, 0)" },
  [D]: { transform: "translate(100%, 0)" },
  [P]: { transform: "translate(0, -100%)" },
  [R]: { transform: "translate(0, 100%)" },
  default: { transform: "transform(-100%, 0)" }
}, F = {
  backgroundColor: {
    type: String,
    default: "#091a28"
  },
  color: {
    type: String,
    default: "#ffffff"
  },
  loadingSpeed: {
    type: Number,
    default: 15
  },
  transitionSpeed: {
    type: Number,
    default: 1400
  },
  transitionType: {
    type: String,
    default: "fade-left"
  }
}, M = "_preloader_1auhy_3", W = "_percentBar_1auhy_29", V = "_loadingWrapper_1auhy_37", z = "_loadingBar_1auhy_47", H = {
  preloader: M,
  percentBar: W,
  loadingWrapper: V,
  loadingBar: z
}, G = (a, l) => {
  const o = a.__vccOpts || a;
  for (const [n, e] of l)
    o[n] = e;
  return o;
}, L = {
  __name: "VuePreloader",
  props: F,
  emits: ["loading-is-over", "transition-is-over"],
  setup(a, { emit: l }) {
    const o = a, n = c(null);
    var e = c(0);
    const v = i(() => ({ backgroundColor: o.backgroundColor })), g = i(() => ({ transition: `all ${o.transitionSpeed}ms ease-in-out` })), m = i(() => {
      if (e.value >= 100)
        return y[o.transitionType] || y.default;
    });
    B(() => {
      e.value < 100 ? setTimeout(() => {
        e.value += 1, n.value && (n.value.style.width = `${e.value}%`);
      }, o.loadingSpeed) : (_(), N());
    }), h(() => {
      T();
    }), I(() => {
      e.value = e.value += 1;
    });
    function _() {
      l("loading-is-over");
    }
    function S() {
      document.body.style.overflow = "auto";
    }
    function T() {
      document.body.style.overflow = "hidden";
    }
    function N() {
      setTimeout(() => {
        l("transition-is-over"), S();
      }, o.transitionSpeed);
    }
    return (r, j) => (u(), p("div", {
      class: s(r.$style.preloader),
      style: d([
        t(v),
        t(g),
        t(m)
      ])
    }, [
      b(r.$slots, "default", k(O({ color: r.color, percent: t(e) })), () => [
        t(e) < 100 ? (u(), p("div", {
          key: 0,
          class: s(r.$style.percentBar),
          style: d({ color: r.color })
        }, w(t(e)) + " % ", 7)) : A("", !0),
        E(f("div", {
          class: s(r.$style.loadingWrapper)
        }, [
          f("div", {
            ref_key: "loadingbar",
            ref: n,
            class: s(r.$style.loadingBar),
            style: d({ backgroundColor: r.color })
          }, null, 6)
        ], 2), [
          [$, t(e) < 100]
        ])
      ])
    ], 6));
  }
}, U = {
  $style: H
}, J = /* @__PURE__ */ G(L, [["__cssModules", U]]);
export {
  J as VuePreloader
};
